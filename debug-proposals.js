// Script para investigar dados das propostas
const { ConvexHttpClient } = require("convex/browser");

const client = new ConvexHttpClient("https://focused-walrus-736.convex.cloud");

async function debugProposals() {
  try {
    console.log("üîç INVESTIGANDO DADOS DAS PROPOSTAS");
    console.log("=" * 50);
    
    // Primeiro, pega um usu√°rio v√°lido
    const users = await client.action("userActions:debugUsers", {});
    console.log("üë• Usu√°rios dispon√≠veis:", users.length);
    
    if (users.length === 0) {
      console.log("‚ùå Nenhum usu√°rio encontrado!");
      return;
    }
    
    const testUser = users[0]; // Usa o primeiro usu√°rio
    console.log("üß™ Testando com usu√°rio:", testUser.name, testUser.id);
    
    // Busca as propostas
    console.log("\nüìã BUSCANDO PROPOSTAS...");
    const proposals = await client.query("proposals:getProposals", {
      userId: testUser.id
    });
    
    console.log("üìä Propostas encontradas:", proposals.length);
    
    // Analisa cada proposta
    proposals.forEach((proposal, index) => {
      console.log(`\nüìù PROPOSTA ${index + 1}:`);
      console.log(`   ID: ${proposal._id}`);
      console.log(`   N√∫mero: ${proposal.proposalNumber}`);
      console.log(`   SalespersonId: ${proposal.salespersonId || 'VAZIO'}`);
      console.log(`   CreatedBy: ${proposal.createdBy ? proposal.createdBy.name : 'NULL'}`);
      
      if (proposal.createdBy) {
        console.log(`   ‚úÖ Criador encontrado: ${proposal.createdBy.name} (${proposal.createdBy.email})`);
      } else {
        console.log(`   ‚ùå Criador N√ÉO encontrado`);
        if (proposal.salespersonId) {
          console.log(`   üîç Tentando buscar usu√°rio ID: ${proposal.salespersonId}`);
        } else {
          console.log(`   ‚ö†Ô∏è Proposta sem salespersonId`);
        }
      }
    });
    
    // Testa buscar usu√°rios individualmente
    console.log("\nüîç TESTANDO BUSCA INDIVIDUAL DE USU√ÅRIOS:");
    for (const user of users) {
      try {
        const foundUser = await client.query("users:getCurrentUser", {
          userId: user.id
        });
        console.log(`‚úÖ ${user.name}: ${foundUser ? 'ENCONTRADO' : 'N√ÉO ENCONTRADO'}`);
      } catch (error) {
        console.log(`‚ùå ${user.name}: ERRO - ${error.message}`);
      }
    }

    // Busca as propostas RAW (sem join) para ver os dados reais
    console.log("\nüîç BUSCANDO PROPOSTAS RAW (SEM JOIN):");
    try {
      const rawProposals = await client.query("proposals:getAllProposalsRaw", {});
      console.log("üìä Propostas RAW encontradas:", rawProposals.length);

      rawProposals.forEach((proposal, index) => {
        console.log(`\nüìù PROPOSTA RAW ${index + 1}:`);
        console.log(`   ID: ${proposal._id}`);
        console.log(`   N√∫mero: ${proposal.proposalNumber}`);
        console.log(`   SalespersonId: ${proposal.salespersonId || 'VAZIO'}`);
        console.log(`   Data cria√ß√£o: ${new Date(proposal._creationTime).toLocaleString()}`);
      });
    } catch (error) {
      console.error("‚ùå Erro ao buscar propostas RAW:", error);
    }

    // Testa buscar usu√°rios espec√≠ficos das propostas
    console.log("\nüîç TESTANDO USU√ÅRIOS ESPEC√çFICOS DAS PROPOSTAS:");
    const userIdsToTest = [
      "j973zgpsywtr5hxsjvcyqkexbn7kqmr8", // ID das propostas de produ√ß√£o
      "j97dcjhmecxf03n4wv3pvwsx297mawsa", // Nobre Car Admin
      "j97e5hp9p10mgzav05wa8erwxs7m4ndw", // Admin
      "j97d5nrp2vsgkat2zy19b2gam57m8z77"  // fabricius
    ];

    for (const userId of userIdsToTest) {
      console.log(`\nüß™ Testando usu√°rio ID: ${userId}`);
      try {
        const foundUser = await client.query("users:getCurrentUser", {
          userId: userId
        });
        if (foundUser) {
          console.log(`‚úÖ ENCONTRADO: ${foundUser.name} (${foundUser.email})`);
        } else {
          console.log(`‚ùå N√ÉO ENCONTRADO`);
        }
      } catch (error) {
        console.log(`üí• ERRO: ${error.message}`);
      }
    }
    
    console.log("\n" + "=" * 50);
    console.log("üéØ INVESTIGA√á√ÉO CONCLU√çDA");
    
  } catch (error) {
    console.error("üí• ERRO CR√çTICO:", error);
  }
}

debugProposals();
