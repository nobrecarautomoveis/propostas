import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  console.log('üîç Middleware executando para:', request.nextUrl.pathname);
  
  // Rotas que N√ÉO precisam de autentica√ß√£o
  const publicPaths = ['/'];
  
  // Verifica se a rota atual √© p√∫blica
  const isPublicPath = publicPaths.includes(request.nextUrl.pathname);
  
  // Se for rota p√∫blica, permite acesso
  if (isPublicPath) {
    console.log('‚úÖ Rota p√∫blica permitida:', request.nextUrl.pathname);
    return NextResponse.next();
  }
  
  // Para rotas protegidas, verifica se h√° token de autentica√ß√£o
  const userId = request.cookies.get('userId')?.value;
  
  console.log('üîê Verificando autentica√ß√£o para:', request.nextUrl.pathname);
  console.log('üë§ UserId no cookie:', userId ? 'Presente' : 'Ausente');
  
  // Se n√£o h√° autentica√ß√£o, redireciona para login
  if (!userId) {
    console.log('‚ùå Redirecionando para login - sem autentica√ß√£o');
    const loginUrl = new URL('/', request.url);
    return NextResponse.redirect(loginUrl);
  }
  
  console.log('‚úÖ Acesso autorizado para:', request.nextUrl.pathname);
  return NextResponse.next();
}

// Configura quais rotas o middleware deve interceptar
export const config = {
  matcher: [
    /*
     * Intercepta todas as rotas exceto:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - arquivos est√°ticos
     */
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.).*)',
  ],
};